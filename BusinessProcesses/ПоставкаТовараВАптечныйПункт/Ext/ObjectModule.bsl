Процедура ОдобритьПоставкуПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	ДокументПоставки=СсылкаДокументаПоставки.ПолучитьОбъект();
	ДокументПоставки.СостояниеПоставки=Перечисления.СостояниеПоставки.ПоставкаНеОсущствлена;
	ДокументПоставки.СсылкаНаБизнесПроцесс=Ссылка; // Только после одобрения можно ссылаться на БП
	
	ДокументПоставки.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Процедура ПроверкаНаличияТовараОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	НедостающиеТовары = Новый Массив(); // Может хранить как числа, так и строчки
	// n   - элемент хрнит название товара
	// n+1 - элемент хранит количество товара 
	
	// Получим остатки товаров, хранящихся на складе
	Запрос=Новый Запрос;
	Запрос.Текст="ВЫБРАТЬ
	             |	Склад_АптечныйПунктОстатки.Товар.Наименование КАК НзваниеТовара,
	             |	Склад_АптечныйПунктОстатки.Склад.Наименование КАК Склад,
	             |	Склад_АптечныйПунктОстатки.КоличествоОстаток КАК ОстатокТовара
	             |ИЗ
	             |	РегистрНакопления.Склад_АптечныйПункт.Остатки КАК Склад_АптечныйПунктОстатки";
	РезультатЗапроса=Запрос.Выполнить();
	Выборка=РезультатЗапроса.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Сообщить(Выборка.НазваниеТовара);
		// Обработка строки
	КонецЕсли;
	
	
	Для каждого СтрТаблТов Из Товары Цикл 
		 
		 //Сообщить(СтрТаблТов.Наименование); //Сделай ошбку, чтобы вывелось сообщение
	 КонецЦикла;
	 
	
	 
	  НаличиеТовараНаСкладе=Перечисления.НаличиеТовараНаСкладе.Имеентся;
//	   ПроверитьНаличиеТовараПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
///	Если НаличиеТовараНаСкладе=Перечисления.НаличиеТовараНаСкладе.НеОпределено Тогда
//		Сообщить("Не выполнены действия, необходимые для выполнения задачи!", СтатусСообщения.Важное);
//   	 	Отказ = Истина;
//	КонецЕсли;

КонецПроцедуры



Процедура ТоварИмеетсяПроверкаУсловия(ТочкаМаршрутаБизнесПроцесса, Результат)
	Если НаличиеТовараНаСкладе=Перечисления.НаличиеТовараНаСкладе.Имеентся Тогда
	    Результат=Истина;
	Иначе
		СостояниеПоставки=Перечисления.СостояниеПоставки.ОжидаетсяПриходТовараНаСклад;
		ДокументПоставки=СсылкаДокументаПоставки.ПолучитьОбъект();
		ДокументПоставки.СостояниеПоставки=СостояниеПоставки;	
		ДокументПоставки.Записать(РежимЗаписиДокумента.Запись);
		Результат=Ложь;
	КонецЕсли;
КонецПроцедуры


Процедура ПоставкаТовараНаСкладОбработка(ТочкаМаршрутаБизнесПроцесса)
	
	// НУЖНО ОСУЩЕСВЛЯТЬ ПОСТАВКУ ТОЛЬКО НЕДОСТАЮЩИХ ТОВАРОВ !!!
	
	// БП создасться при записи документа поставки на склад
	
	ДокументПоставкиНаСклад = Документы.ПоступленияНаСклад.СоздатьДокумент();
	ДокументПоставкиНаСклад.Дата=ТекущаяДата();
	
	ТаблицаТоваров = Товары.Выгрузить();
	Для Каждого СтрТаблТов Из ТаблицаТоваров Цикл
		//Добавляет строку в конец табличной части документа поставки на склад
		СтрТаблПостНаСклад = ДокументПоставкиНаСклад.Товары.Добавить();
		СтрТаблПостНаСклад.Наименование = СтрТаблТов.Наименование;
		СтрТаблПостНаСклад.Количество = СтрТаблТов.Количество;
	КонецЦикла;
	ДокументПоставкиНаСклад.Записать();
		
КонецПроцедуры


// Кто печатает заявку, тот и доставляет.
Процедура РаспечататьЗаявкуНаДоставкуПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	
	//РаспределитьПоставкуПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	//Если НЕ ЗначениеЗаполнено(Склад) Тогда
	//	Сообщить("Не выполнены действия, необходимые для выполнения задачи!", СтатусСообщения.Важное);
	//    	Отказ = Истина;
	//Иначе
	//	// Обнавляем данные документа
	//	ДокументПоставки=СсылкаДокументаПоставки.ПолучитьОбъект();
	//	ДокументПоставки.СоСклада=Склад;
	//	ДокументПоставки.Записать(РежимЗаписиДокумента.Запись);
	//КонецЕсли;

	
	
	ОсуществляетПоставку=ПараметрыСеанса.ТекущийПользователь;
	// Обнавляем данные документа
	ДокументПоставки=СсылкаДокументаПоставки.ПолучитьОбъект();
	ДокументПоставки.ОсуществляетПоставку=ОсуществляетПоставку;
	ДокументПоставки.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Процедура ЗагрузитьТоварПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	СостояниеПоставки=Перечисления.СостояниеПоставки.ТоварДоставляется;
	// Обнавляем данные документа
	ДокументБизнесПроцесса=СсылкаДокументаПоставки.ПолучитьОбъект();
	ДокументБизнесПроцесса.СостояниеПоставки=СостояниеПоставки;
	ДокументБизнесПроцесса.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Процедура ДоставитьТоварПриВыполнении(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	// Обнавляем данные документа
	ДокументПоставки=СсылкаДокументаПоставки.ПолучитьОбъект();
	ДокументПоставки.ДатаПоставки=ТекущаяДата();
	ДокументПоставки.Записать(РежимЗаписиДокумента.Запись);
КонецПроцедуры

Процедура УказатьСостояниеПоставкиПередВыполнением(ТочкаМаршрутаБизнесПроцесса, Задача, Отказ)
	Если СостояниеПоставки=Перечисления.СостояниеПоставки.ТоварДоставляется ИЛИ
		СостояниеПоставки=Перечисления.СостояниеПоставки.ПоставкаНеОсущствлена Тогда
		Сообщить("Не выполнены действия, необходимые для выполнения задачи!", СтатусСообщения.Важное);
   	 	Отказ = Истина;
	Иначе
		// Обнавляем данные документа
		ДокументПоставки=СсылкаДокументаПоставки.ПолучитьОбъект();
		ДокументПоставки.СостояниеПоставки=СостояниеПоставки;
		ДокументПоставки.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
КонецПроцедуры

Процедура СостояниеПоставкиОбработкаВыбораВарианта(ТочкаВыбораВарианта, Результат)
	Если СостояниеПоставки=Перечисления.СостояниеПоставки.ПоставкаЦелая Тогда
		 Результат=ТочкаВыбораВарианта.Варианты.ПоставкаЦелая
	 ИначеЕсли СостояниеПоставки=Перечисления.СостояниеПоставки.БракованнаяПоставка Тогда
		 
		 Результат=ТочкаВыбораВарианта.Варианты.БракованнаяПоставка;
	 ИначеЕсли СостояниеПоставки=Перечисления.СостояниеПоставки.НеполнаяПоставка Тогда
		 
		 Результат=ТочкаВыбораВарианта.Варианты.НеполнаяПоставка;
	КонецЕсли
	
КонецПроцедуры

Процедура ПроведениеЗаписиДокументаПоставкиОбработка(ТочкаМаршрутаБизнесПроцесса)
	ДокументПоставки=СсылкаДокументаПоставки.ПолучитьОбъект();		
	ДокументПоставки.Записать(РежимЗаписиДокумента.Проведение);
КонецПроцедуры


